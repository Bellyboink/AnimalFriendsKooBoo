
@using Kooboo.CMS.Content.Models;
@using Kooboo.CMS.Content.Query;
@{
    var schema = (Kooboo.CMS.Content.Models.Schema)ViewData["Schema"];
    var allowedEdit = (bool)ViewData["AllowedEdit"];
    var allowedView = (bool)ViewData["AllowedView"];
    var workflowItem  = Model._WorkflowItem_;
    var hasWorkflowItem = workflowItem!=null;
    var availableEdit = hasWorkflowItem || (!hasWorkflowItem && allowedEdit);
}
    @using(Html.BeginForm(ViewContext.RequestContext.AllRouteValues()["action"].ToString()
            , ViewContext.RequestContext.AllRouteValues()["controller"].ToString()
            , ViewContext.RequestContext.AllRouteValues()
            , FormMethod.Post, new RouteValueDictionary(new { enctype = "application/x-www-form-urlencoded" })))
{
    <table><tr>
            <th>
            <label for="Name">Name</label>
            </th>
            <td>
            <input class='long' id="Name" name="Name" type="text" value="@(Model.Name ?? "")" />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Name"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="ConnectionString">ConnectionString</label>
            </th>
            <td>
            <input class='long' id="ConnectionString" name="ConnectionString" type="text" value="@(Model.ConnectionString ?? "")" />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["ConnectionString"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="DatabaseTable">DatabaseTable</label>
            </th>
            <td>
            <input class='long' id="DatabaseTable" name="DatabaseTable" type="text" value="@(Model.DatabaseTable ?? "")" />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["DatabaseTable"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="ContentTypeFolder">ContentTypeFolder</label>
            </th>
            <td>
            <input class='long' id="ContentTypeFolder" name="ContentTypeFolder" type="text" value="@(Model.ContentTypeFolder ?? "")" />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["ContentTypeFolder"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="MappedFields">MappedFields</label>
            </th>
            <td>
            <input class='long' id="MappedFields" name="MappedFields" type="text" value="@(Model.MappedFields ?? "")" />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["MappedFields"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="SourceType">SourceType</label>
            </th>
            <td>
            <input class="long" id="SourceType" name="SourceType" type="text" value="@(Model.SourceType ?? "")" />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["SourceType"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="Query">Query</label>
            </th>
            <td>
            <input class='long' id="Query" name="Query" type="text" value="@(Model.Query ?? "")" />            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Query"], null)
            
            </td>          
            </tr><tr>
            <th>
           
            </th>
            <td>
            <input id='RunOnApplicationStartup' name="RunOnApplicationStartup" type="checkbox" @(Convert.ToBoolean(Model.RunOnApplicationStartup)?"checked":"") value="true"/>
                                    <input type="hidden" value="false" name="RunOnApplicationStartup"/>
            <label class="inline" for="RunOnApplicationStartup">RunOnApplicationStartup</label>
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["RunOnApplicationStartup"], null)
            </td>          
            </tr><tr>
            <th>
            <label for="LastStartedAt">LastStartedAt</label>
            </th>
            <td>
            <input class="long" id="LastStartedAt" name="LastStartedAt" type="text" value="@(Model.LastStartedAt ==null ? "" : ((Model.LastStartedAt is string)? Model.LastStartedAt : Model.LastStartedAt.ToLocalTime().ToShortDateString()))" /><script language="javascript" type="text/javascript">$(function(){$("#LastStartedAt").datepicker();});</script>            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["LastStartedAt"], null)
            
            </td>          
            </tr><tr>
            <th>
            <label for="RepeatIntervalInMinutes">RepeatIntervalInMinutes</label>
            </th>
            <td>
            <input class="long" id="RepeatIntervalInMinutes" name="RepeatIntervalInMinutes" type="text" value="@(Model.RepeatIntervalInMinutes ?? "")"  data-val-number="The field RepeatIntervalInMinutes must be a number." data-val="true"/>            
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["RepeatIntervalInMinutes"], null)
            
            </td>          
            </tr><tr>
            <th>
           
            </th>
            <td>
            <input id='Enabled' name="Enabled" type="checkbox" @(Convert.ToBoolean(Model.Enabled)?"checked":"") value="true"/>
                                    <input type="hidden" value="false" name="Enabled"/>
            <label class="inline" for="Enabled">Enabled</label>
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Enabled"], null)
            </td>          
            </tr>
            @if (allowedEdit) {
                <tr>
            <th>
           
            </th>
            <td>
            <input id='Published' name="Published" type="checkbox" @(Convert.ToBoolean(Model.Published)?"checked":"") value="true"/>
                                    <input type="hidden" value="false" name="Published"/>
            <label class="inline" for="Published">Published</label>
            @Html.ValidationMessageForColumn(((ISchema)ViewData["Schema"])["Published"], null)
            </td>          
            </tr>
            }
    @Html.Action("Categories", ViewContext.RequestContext.AllRouteValues())
    </table>   
}